import { randomBytes } from "crypto";
import createHttpError from "http-errors";
export const csrfSync = ({ ignoredMethods = ["GET", "HEAD", "OPTIONS"], getTokenFromRequest = (req) => req.headers["x-csrf-token"], getTokenFromState = (req) => {
    return req.session.csrfToken;
}, storeTokenInState = (req, token) => {
    req.session.csrfToken = token;
}, size = 128, } = {}) => {
    const ignoredMethodsSet = new Set(ignoredMethods);
    const invalidCsrfTokenError = createHttpError(403, "invalid csrf token", {
        code: "EBADCSRFTOKEN",
    });
    const generateToken = (req) => {
        const newToken = randomBytes(size).toString("hex");
        storeTokenInState(req, newToken);
        return newToken;
    };
    const revokeToken = (req) => {
        storeTokenInState(req);
    };
    const isRequestValid = (req) => {
        const receivedToken = getTokenFromRequest(req);
        const storedToken = getTokenFromState(req);
        return (typeof receivedToken === "string" &&
            typeof storedToken === "string" &&
            receivedToken === storedToken);
    };
    const csrfSynchronisedProtection = (req, res, next) => {
        if (ignoredMethodsSet.has(req.method)) {
            next();
        }
        else {
            const isCsrfValid = isRequestValid(req);
            if (!isCsrfValid) {
                return next(invalidCsrfTokenError);
            }
            revokeToken(req);
            next();
        }
    };
    return {
        invalidCsrfTokenError,
        csrfSynchronisedProtection,
        generateToken,
        getTokenFromRequest,
        getTokenFromState,
        isRequestValid,
        storeTokenInState,
        revokeToken,
    };
};
