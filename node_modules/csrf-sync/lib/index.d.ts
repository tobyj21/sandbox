import type { NextFunction, Request, Response } from "express";
import { type HttpError } from "http-errors";
declare module "express-session" {
    interface SessionData {
        csrfToken?: CsrfSyncedToken;
    }
}
export declare type RequestMethod = "GET" | "HEAD" | "PATCH" | "PUT" | "POST" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "PATCH";
export declare type CsrfSyncedToken = string | null | undefined;
export declare type CsrfRequestToken = string | undefined;
export declare type CsrfTokenStorer = (req: Request, token?: CsrfSyncedToken) => void;
export declare type CsrfTokenRetriever = (req: Request) => CsrfSyncedToken;
export declare type CsrfTokenGenerator = (req: Request) => string;
export declare type CsrfTokenRevoker = (req: Request) => void;
export declare type CsrfRequestValidator = (req: Request) => boolean;
export declare type CsrfSynchronisedProtection = (req: Request, res: Response, next: NextFunction) => void;
export interface CsrfSyncOptions {
    ignoredMethods?: RequestMethod[];
    getTokenFromRequest?: CsrfTokenRetriever;
    getTokenFromState?: CsrfTokenRetriever;
    storeTokenInState?: CsrfTokenStorer;
    size?: number;
}
export interface CsrfSync {
    invalidCsrfTokenError: HttpError;
    csrfSynchronisedProtection: CsrfSynchronisedProtection;
    generateToken: CsrfTokenGenerator;
    getTokenFromRequest: CsrfTokenRetriever;
    getTokenFromState: CsrfTokenRetriever;
    isRequestValid: CsrfRequestValidator;
    storeTokenInState: CsrfTokenStorer;
    revokeToken: CsrfTokenRevoker;
}
export declare const csrfSync: ({ ignoredMethods, getTokenFromRequest, getTokenFromState, storeTokenInState, size, }?: CsrfSyncOptions) => CsrfSync;
